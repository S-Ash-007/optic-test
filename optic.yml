ruleset:
  # ◾️ 1. Prevent structural breaking changes between versions
  - breaking-changes:
      exclude_operations_with_extension: x-draft # skip ops marked “x-draft” :contentReference[oaicite:1]{index=1}

  # ◾️ 2. Enforce consistent naming (baseline “always” on all endpoints)
  - naming:
      required_on: always # apply to legacy + new ops :contentReference[oaicite:2]{index=2}
      requestHeaders: Capital-Param-Case
      responseHeaders: param-case
      properties: camelCase
      pathComponents: param-case
      cookieParameters: param-case
      queryParameters: snake_case
      operationId: camelCase

  # ◾️ 3. Require documentation fields
  - documentation:
      required_on: added # only on new/changed ops :contentReference[oaicite:3]{index=3}
      require_property_descriptions: true
      require_operation_summary: true
      require_operation_description: true
      require_operation_id: true
      exclude_operations_with_extension: x-legacy-api

  # ◾️ 4. Ensure examples match schema
  - examples:
      required_on: always # on all ops :contentReference[oaicite:4]{index=4}
      require_request_examples: true
      require_response_examples: true
      require_parameter_examples: true
      exclude_operations_with_extension: x-draft

  # ◾️ 5. Run your Spectral style/security rules
  # Run any existing spectral ruleset
  - spectral:
      # These rules will ony run on things you add to your API
      # Ie new properties, operations, responses, etc.
      added:
        # URLs are supported
        - ./rules/oas.yaml
        - ./rules/security.yaml
        # Local files work too.
      # - ./local-file.js
      # These rules will ony run on everything in the spec (normal spectral)
      always:
        - ./rules/oas.yaml
